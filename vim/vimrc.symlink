set nocompatible
set backup
set backupdir=$HOME/.vim/backup
set encoding=utf-8
let $NVIM_PYTHON_LOG_FILE="/tmp/nvim_log"
let $NVIM_PYTHON_LOG_LEVEL="DEBUG"
" ======= vim-plug =========
call plug#begin()

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins'  }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

Plug 'ndevvy/autocomplete-flow'
Plug 'Shougo/neosnippet'
Plug 'Shougo/neosnippet-snippets'

Plug 'janko-m/vim-test'
Plug 'wellle/tmux-complete.vim'
Plug 'pgr0ss/vimux-ruby-test'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
Plug 'alessandroyorba/despacio'
Plug 'ciaranm/inkpot'
Plug 'whatyouhide/vim-gotham'
" Plug 'Shougo/neocomplete.vim'
Plug 'airblade/vim-gitgutter'
Plug 'w0rp/ale'
Plug 'easymotion/vim-easymotion'
Plug 'elzr/vim-json'
Plug 'felixhummel/setcolors.vim'
Plug 'godlygeek/tabular'
Plug 'jgdavey/tslime.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'junegunn/vim-emoji'
Plug 'morhetz/gruvbox'
Plug 'itchyny/lightline.vim'
Plug 'nelstrom/vim-qargs'
Plug 'pbrisbin/vim-mkdir'
Plug 'scrooloose/nerdtree'
Plug 'thoughtbot/vim-rspec'
Plug 'rickhowe/diffchar.vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
" Plug 'vim-airline/vim-airline'
" Plug 'powerline/powerline'
" Plug 'vim-airline/vim-airline-themes'
Plug 'vim-ruby/vim-ruby'
Plug 'schickling/vim-bufonly'
Plug 'kana/vim-textobj-user'
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'mtth/scratch.vim'
Plug 'Chiel92/vim-autoformat'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tpope/vim-rbenv'
Plug 'benmills/vimux'
Plug 'sheerun/vim-polyglot'
Plug 'mattn/calendar.vim'
Plug 'jelera/vim-javascript-syntax'
Plug 'itchyny/calendar.vim'
Plug 'pangloss/vim-javascript'
Plug 'sbdchd/neoformat'
Plug 'andymass/vim-matchup'
Plug 'carlitux/deoplete-ternjs'
Plug 'chrisbra/Colorizer'
Plug 'zchee/deoplete-jedi'

" vim-endwise needs to be loaded after delimitmate - see https://github.com/Raimondi/delimitMate/issues/202
Plug 'raimondi/delimitmate'
Plug 'tpope/vim-endwise'
call plug#end()

" ========= Setup ========

let g:deoplete#enable_at_startup = 1
let g:deoplete#sources#ternjs#tern_bin = '/usr/local/bin/ternjs'
let g:deoplete#sources#ternjs#timeout = 1
let g:loaded_autocomplete_flow = 1
let g:autocomplete_flow#flowbin = 'yarn flow'

let g:neosnippet#enable_completed_snippet = 1
" Whether to include the types of the completions in the result data. Default: 0
let g:deoplete#sources#ternjs#types = 1
let g:tmuxcomplete#trigger = ''
let &runtimepath.=',~/.vim/plugged/ale'
set re=1


if &shell == "/usr/bin/sudosh"
  set shell=/bin/bash -l
endif

" ========= Options ========

filetype off
filetype plugin indent on
syntax enable
compiler ruby
syntax on
set hlsearch
set number
set showmatch
set incsearch
set background=dark
set hidden
" set ambiwidth=double
set backspace=indent,eol,start
set noshowmode " vim-airline shows mode
set autoindent
set textwidth=0  tabstop=2 shiftwidth=2 softtabstop=2 expandtab
set ruler
set cursorline
set wrap
set dir=/tmp//
set scrolloff=5
set ignorecase
set smartcase
set wildignore+=*.pyc,*.o,*.class,*.lo,.git,vendor/*,node_modules/**,bower_components/**
set tags+=gems.tags
set completefunc=emoji#complete
set re=1
set splitbelow splitright

set nobackup
set nowritebackup
set noswapfile

hi link javaScriptTemplateDelim String
hi link javaScriptTemplateVar Text
hi link javaScriptTemplateString String

"Undo
if version >= 703
  set undodir=~/.vim/undodir
  set undofile
  set undoreload=10000 "maximum number lines to save for undo on a buffer reload
endif
set undolevels=1000 "maximum number of changes that can be undone
set autowrite

" vertical diffs
set diffopt+=vertical

" set cursor line only in current window
augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  au VimEnter,WinLeave,BufWinLeave * setlocal nocursorline
augroup END

augroup CursorColumn
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorcolumn
  au VimEnter,WinLeave,BufWinLeave * setlocal nocursorcolumn
augroup END

" File Types
autocmd FileType php setlocal tabstop=4 shiftwidth=4 softtabstop=4
autocmd FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4
autocmd FileType java setlocal tabstop=4 shiftwidth=4 softtabstop=4
autocmd FileType cs setlocal tabstop=4 shiftwidth=4 softtabstop=4

autocmd FileType tex setlocal textwidth=78
autocmd BufNewFile,BufRead *.txt setlocal textwidth=78

autocmd FileType python runtime python_mappings.vim

if version >= 700
  autocmd BufNewFile,BufRead *.txt setlocal spell spelllang=en_us
  autocmd FileType tex setlocal spell spelllang=en_us
endif

" " Highlight trailing whitespace
" autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
" autocmd BufRead,InsertLeave * match ExtraWhitespace /\s\+$/

" AutoFormatting
let g:neoformat_try_formatprg = 1
let g:neoformat_enabled_ruby = ['rubocop']
let g:neoformat_enabled_python = ['black']
" let g:neoformat_verbose = 1
" let g:neoformat_javascript_prettier = {
"     \ 'exe': 'prettier',
"     \ }

let g:matchup_transmute_enabled = 1
let g:matchup_matchparen_enabled = 1
let g:matchup_motion_enabled = 1
let g:matchup_text_obj_enabled = 1
let g:matchup_surround_enabled = 1

:hi MatchParen ctermbg=blue guibg=lightblue cterm=italic gui=italic
:hi MatchParenCur cterm=underline gui=underline
:hi MatchWordCur cterm=underline gui=underline
augroup NeoformatAutoFormat
    autocmd!
    autocmd FileType javascript,javascript.jsx setlocal formatprg=prettier\ --stdin-filepath\ --parser=babylon
    autocmd BufWritePre *.js,*.jsx,*.py Neoformat
augroup END

" Autoremove trailing spaces when saving the buffer
autocmd FileType c,cpp,elixir,eruby,html,java,javascript,php,ruby autocmd BufWritePre <buffer> :%s/\s\+$//e

" " Highlight too-long lines
" autocmd BufRead,InsertEnter,InsertLeave * 2match LineLengthError /\%126v.*/
" highlight LineLengthError ctermbg=black guibg=black
" autocmd ColorScheme * highlight LineLengthError ctermbg=black guibg=black

" Set up highlight group & retain through colorscheme changes
highlight ExtraWhitespace ctermbg=red guibg=red

autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red

" Status
set laststatus=2
set statusline=
set statusline+=%<\                       " cut at start
set statusline+=%2*[%n%H%M%R%W]%*\        " buffer number, and flags
set statusline+=%F\                    " relative path
set statusline+=%=                        " seperate between right- and left-aligned
" set statusline+=%1*%y%*%*\                " file type
set statusline+=%10(L(%l/%L)%)\           " line
set statusline+=%2(C(%v/125)%)\           " column
set statusline+=%P                        " percentage of file
set timeoutlen=1000
set ttimeoutlen=0

augroup vimrcEx
  autocmd!
  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
        \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal g`\"" |
        \ endif

  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile Appraisals set filetype=ruby
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  autocmd BufRead,BufNewFile .{jscs,jshint,eslint}rc set filetype=json
augroup END

" ========= Plugin Options ========
" vim-javascript
" let g:javascript_plugin_flow = 1

let g:AckAllFiles = 0

let g:AckCmd = 'ack --type-add ruby=.feature --ignore-dir=tmp 2> /dev/null'

let html_use_css=1
let html_number_lines=0
let html_no_pre=1

let g:calendar_google_calendar = 1
let g:calendar_google_task = 1

let g:gist_clip_command = 'pbcopy'
let g:gist_detect_filetype = 1

let g:rubycomplete_buffer_loading = 1
let g:no_html_toolbar = 'yes'

let coffee_no_trailing_space_error = 1

let NERDTreeIgnore=['\.pyc', '\.o', '\.class', '\.lo']
let NERDTreeHijackNetrw = 0

let g:netrw_banner = 0

let g:VimuxUseNearestPane = 0

let g:vim_markdown_folding_disabled=1

let g:tslime_always_current_session = 1
let g:tslime_always_current_window = 1

let mapleader = " "

let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]

let g:delimitMate_expand_cr = 2
let g:delimitMate_expand_space = 1

" colors & themes
set term=screen-256color
colorscheme gruvbox
let g:gruvbox_contrast_dark = 'dark'

augroup markdown
  au!
  au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END

" Neocomplete
" let g:neocomplete#enable_at_startup = 1

" Airline

let g:airline#extensions#tabline#enabled = 1
let g:airline_skip_empty_sections = 1
let g:airline_theme='gruvbox'
let g:airline_exclude_preview = 1
let g:airline#extensions#branch#displayed_head_limit = 20
let g:airline_mode_map = {
      \ '__' : '-',
      \ 'n'  : 'N',
      \ 'i'  : 'I',
      \ 'R'  : 'R',
      \ 'c'  : 'C',
      \ 'v'  : 'V',
      \ 'V'  : 'V',
      \ '' : 'V',
      \ 's'  : 'S',
      \ 'S'  : 'S',
      \ '' : 'S',
      \ }
let g:bufferline_echo = 0
let g:airline_powerline_fonts=1
let g:airline#extensions#hunks#enabled = 1
let g:airline#extensions#ale#enabled = 1

" Lightline
      \ }

let g:lightline = {
      \ 'colorscheme': 'gruvbox',
      \ 'active': { 'left': [['mode', 'paste'], ['gitbranch'], ['readonly', 'filename', 'modified']]},
      \ 'component_function': {
      \   'fileformat': 'LightlineFileformat',
      \   'filetype': 'LightlineFiletype',
      \   'gitbranch': 'fugitive#head',
      \   'filename': 'LightlineFilename',
      \ 'fileencoding': 'LightlineFileencoding',
      \ },
    \ }


function! LightlineFileformat()
  return winwidth(0) > 100 ? &fileformat : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 100 ? &fileencoding : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 100 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFilename()
 return @%
endfunction

" ALE
highlight clear ALEErrorSign
highlight clear ALEWarningSign
let g:ale_sign_error = '🌹'
let g:ale_sign_warning = '🌻'
let g:ale_set_highlights = 1
let g:ale_sign_column_always = 1
let g:ale_linters = { 'javascript': ['eslint', 'flow'], 'jsx': ['eslint', 'flow'], 'ruby': ['rubocop', 'ruby'], 'python': ['flake8']  }
let g:ale_javascript_eslint_use_global = 0
" let g:ale_javascript_prettier_use_global = 0
" let g:ale_javascript_prettier_executable = 'node_modules/.bin/prettier'
" let g:airline#extensions#ale#enable = 1
let g:ale_echo_msg_error_str = '⨉'
let g:ale_echo_msg_warning_str = '⚠ '
let g:ale_echo_msg_format = '%severity% %s [%linter%]'
let g:ale_fixers={
      \ 'javascript': ['remove_trailing_lines'],
      \ 'ruby': ['rubocop', 'remove_trailing_lines'],
      \}
let g:ale_fix_on_save = 1
let g:ale_javascript_prettier_options = '--single-quote --trailing-comma es5 --jsx-bracket-same-line --parser babylon --print-width 100'

let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1

nnoremap <silent> <Leader>a :ALENextWrap<CR>
nnoremap <silent> <Leader>A :ALEPrevious<CR>
nnoremap <silent> K <Nop>

" FZF

"" use agignore
let $FZF_DEFAULT_COMMAND= 'ag -g ""'

"" Customize fzf colors to match your color scheme
let g:fzf_colors =
      \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

map <silent> <C-p> :FZF<CR>

" === custom vim-surround commands ===
" change string to symbol with e.g. cs':
let g:surround_58 = ":\r"

" file preview using highlight
let g:fzf_files_options =
  \ '--preview "(highlight -O ansi {} || cat {}) 2> /dev/null | head -'.&lines.'"'

" fzf preview window
autocmd VimEnter * command! -bang -nargs=* Ag
      \ call fzf#vim#ag(<q-args>,
      \                 <bang>0 ? fzf#vim#with_preview('up:60%')
      \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
      \                 <bang>0)

" === Fin-specific setup ===
let g:rails_projections = {
      \ "app/controllers/api/*_controller.rb": {
      \   "test": [
      \     "spec/requests/api/{}_spec.rb"
      \   ]
      \ },
      \ "spec/requests/api/*_spec.rb": {
      \   "alternate": "app/controllers/api/{}_controller.rb"
      \ },
      \ "app/lib/*.rb": {
      \   "test": ["spec/lib/{}_spec.rb"]
      \ },
      \ "app/client/javascripts/*.js": {
      \   "alternate": "spec/javascripts/{}Spec.js"
      \ },
      \ "spec/javascripts/*Spec.js" : {
      \   "alternate": "app/client/javascripts/{}.js"
      \ }}

let test#python#runner = 'pytest'
let test#strategy = {
  \ 'nearest': 'tslime',
\}
" ========= Shortcuts ========
inoremap <expr> <Tab> pumvisible() ? "\<C-N>" : "\<Tab>"
set pastetoggle=<F3>

nmap = <C-w>=
" comment
noremap <silent> <leader>/ :Commentary<cr>

" indent whole file
noremap <silent><leader>i :Autoformat<cr>:Neoformat<cr>

" auto-indent current paragraph
nnoremap <silent> <leader>bi {<C-V>}=<Esc><C-O><C-O>

" ctrl-l to escape and save in insert mode
imap <C-l> <Esc>:w<cr>


" break line (opposite of J)
nnoremap U a<CR><Esc>k$

" open vim-rails alternate file in vertical split
nnoremap <leader>8 :vsp<cr> :A<cr>

" " buffer shortcuts
nnoremap <silent> <leader>b :Buffers<CR>

" git blame
nnoremap <silent> <leader>gb :Gblame<CR>

" esc is hard
inoremap ii <Esc>

" NERDTree
map <silent> <LocalLeader>nt :NERDTreeToggle<CR>
map <C-n> :NERDTreeToggle<CR>
map <silent> <LocalLeader>nr :NERDTree<CR>
map <silent> <LocalLeader>nf :NERDTreeFind<CR>

" run focused JS tests [FIN]

" Vimux
map <silent> <LocalLeader>rl :VimuxRunLastCommand<CR>
map <silent> <LocalLeader>vi :wa<CR> :VimuxInspectRunner<CR>
map <silent> <LocalLeader>vk :wa<CR> :VimuxInterruptRunner<CR>
map <silent> <LocalLeader>vx :wa<CR> :VimuxClosePanes<CR>
map <silent> <LocalLeader>vp :VimuxPromptCommand<CR>
vmap <silent> <LocalLeader>vs "vy :call VimuxRunCommand(@v)<CR>
nmap <silent> <LocalLeader>vs vip<LocalLeader>vs<CR>
map <silent> <LocalLeader>ds :call VimuxRunCommand('clear; grep -E "^ *describe[ \(]\|^ *context[ \(]\|^ *it[ \(]" ' . bufname("%"))<CR>

cnoremap <Tab> <C-L><C-D>

nnoremap <silent> k gk
nnoremap <silent> j gj
nnoremap <silent> Y y$

" tslime
vmap <C-c><C-c> <Plug>SendSelectionToTmux
nmap <C-c><C-c> <Plug>NormalModeSendToTmux
nmap <C-c>r <Plug>SetTmuxVars

let g:rspec_command = 'call Send_to_Tmux("rspec {spec}\n")'

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <c-w>l

" run focused test on the current line
map <Leader>j :call VimuxRunCommand("clear; ./dev-scripts/jest-run-focused-test.sh " . expand("%.") . ":" . line("."))<CR>

" run all js tests
map <Leader>J :call VimuxRunCommand("clear; yarn test")<CR>

" run focused rb tests in vim-rspec
let g:vimux_ruby_clear_console_on_run = 0
let g:vimux_ruby_file_relative_paths = 1


" todo: be wise to jest vs jasmine
function! RunFocusedTest()
  let thisft = &ft
  if thisft == "javascript" || thisft == "javascript.jsx"
    call VimuxRunCommand("clear; ./dev-scripts/karma-run-line-number.sh " . expand("%.") . ":" . line("."))
  elseif thisft == "ruby"
    execute "RunRubyFocusedTest"
  else 
    echom "Unknown focused spec runner for filetype: " . thisft
  endif
endfunction

function! RunJasmineTestFile()
  let thisline = line('.')
  execute "goto"
  let descline = search('describe')
  execute thisline
  call VimuxRunCommand("clear; ./dev-scripts/karma-run-line-number.sh " . expand("%.") . ":" . descline)
endfunction

function! RunTestFile()
  let thisft = &ft
  if thisft == "javascript" || thisft == "javascript.jsx"
    call RunJasmineTestFile()
  elseif thisft == "ruby"
    execute "RunAllRubyTests"
  else 
    echom "Unknown focused spec runner for filetype: " . thisft
  endif
endfunction

" Set executable bit
function! SetExecutableBit()
  let fname = expand("%:p")
  checktime
  execute "au FileChangedShell " . fname . " :echo"
  silent !chmod a+x %
  checktime
  execute "au! FileChangedShell " . fname
endfunction
command! Xbit call SetExecutableBit()

" Clipboard
" copy all to clipboard
nmap ,a ggVG"*y
" copy word to clipboard
nmap <Leader>d "*yiw
" copy highlighted to clipboard
map <Leader>c "*y
" jkpaste
nnoremap <Leader><Leader>p :set paste<CR>"*p :set nopaste<CR>
" Pasting over a selection does not replace the clipboard
xnoremap <expr> p 'pgv"'.v:register.'y'


" underline current line, markdown style
nmap ,u "zyy"zp:.s/./-/g<CR>:let @/ = ""<CR>

" ========= Functions ========
command! SudoW w !sudo tee %

" compare master's version of current file
nnoremap <silent> <Leader>cm :Gsplit master:%<CR>

nmap <leader>w :Ag <c-r>=expand("<cword>")<cr><cr>
nnoremap <silent> <Leader>rb :Ag <<c-r>=expand("%:t:r")<CR><CR>
command! -nargs=0 RenderedBy :call RenderedBy()

nnoremap <silent> <Leader>bw noautocmd w %<CR>

command! -nargs=0 Cw noautocmd w %

function! GitGrepWord()
  cgetexpr system("git grep -n '" . expand("<cword>") . "'")
  echo 'Number of matches: ' . len(getqflist())
  cwin
endfunction

command! -nargs=0 GitGrepWord :call GitGrepWord()

nnoremap <silent> gw :GitGrepWord<CR>

function! Trim()
  %s/\s*$//
endfunction
command! -nargs=0 Trim :call Trim()
nnoremap <silent> <Leader>cw :Trim<CR>

" quick profiling for when vim is slow
function! ProfileStart()
  let s:profilestart = 'profile start vim-profile-' . strftime("%y-%m-%d-%H%M%S") . '.log'
  exec s:profilestart
  profile func *
  profile file *
endfunction

function! ProfileEnd()
  profile pause
  noautocmd qall!
endfunction

command! -nargs=0 ProfileStart :call ProfileStart()
command! -nargs=0 ProfileEnd :call ProfileEnd()

" switch require syntax to import syntax
nnoremap <Leader>v :s/var \(.\+\) = require(\(.\+\))/import \1 from \2/g<CR>


" window swaping
function! MarkWindowSwap()
    let g:markedWinNum = winnr()
endfunction

function! DoWindowSwap()
    "Mark destination
    let curNum = winnr()
    let curBuf = bufnr( "%" )
    exe g:markedWinNum . "wincmd w"
    "Switch to source and shuffle dest->source
    let markedBuf = bufnr( "%" )
    "Hide and open so that we aren't prompted and keep history
    exe 'hide buf' curBuf
    "Switch to dest and shuffle source->dest
    exe curNum . "wincmd w"
    "Hide and open so that we aren't prompted and keep history
    exe 'hide buf' markedBuf 
endfunction

nmap <silent> <leader>mw :call MarkWindowSwap()<CR>
nmap <silent> <leader>pw :call DoWindowSwap()<CR>

" Custom filetypes
au BufRead,BufNewFile {Capfile,Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru,.caprc,.irbrc,irb_tempfile*} set ft=ruby
au BufRead,BufNewFile {*.less,*.sass} set ft=css
au BufRead,BufNewFile {*.tfstate,*.tfstate.backup} set ft=json

map <silent> \c :let @/ = ""<CR>
" Revert the current buffer
nnoremap <silent> \r :e!<CR>

function! StartInferiorSlimeServer()
  let g:__InferiorSlimeRunning = 1
  call VimuxRunCommand("inferior-slime")
endfunction
command! -nargs=0 StartInferiorSlimeServer :call StartInferiorSlimeServer()

function! __Edge()

  set ttyfast

  map <leader>nf :e%:h<CR>

  let g:VimuxOrientation = "h"
  let g:VimuxHeight = "40"
endfunction

if ! has('gui_running')
  set ttimeoutlen=10
  augroup FastEscape
    autocmd!
    au InsertEnter * set timeoutlen=0
    au InsertLeave * set timeoutlen=1000
  augroup END
endif

set directory=$HOME/.vim/tmp
set dir=$HOME/.vim/tmp
